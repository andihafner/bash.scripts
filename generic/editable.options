#!/bin/bash

help.show() {
  echo -e "                                                                       
*********************************************************************
* editable.options (â†„) kmu-net.ch / andihafner.com 2022 MIT license *
*********************************************************************

Description

  Generic bash script to invoke a command with an editable list of options.

  Edit the option list inside this script to your needs.

Syntax:

  ./editable.options command arguments

The composed command is presented to you and you are asked for execution.

Example:

  ./editable.options ls

Available options:

  no input, --help or -h        Shows this help text

  any other input               Shows command to execute\n"

}

#-------------------------------------------------------------------------------

: "
Used resources:
https://stackoverflow.com/questions/16553089/dynamic-variable-names-in-bash
https://dev.to/a1ex/tricks-of-declaring-dynamic-variables-in-bash-15b9
"

#-------------------------------------------------------------------------------

: "
Todo:
https://unix.stackexchange.com/questions/85846/how-can-i-print-n-with-echo
https://askubuntu.com/questions/701616/how-to-print-n-without-issuing-a-newline
"

#-------------------------------------------------------------------------------

init() {

  command="$1"
 
  arg.set param1 $2
  arg.set param2 $3

  options=$(

    # ******************************
    # * Define your options below: *
    # ******************************

    # Example for the 'ls' command:

    echo -e "-l" # for the long list
    # echo -e "-a" # show hidden files
    echo -e "-h" # use human readable values

    # You can comment out unwanted options with a leading "#"

  )

  echo -e "\nComposed command: \"$command $(echo $options)$param1$param2\"\n" | tee editable.options_$(date +%Y%m%d_%H%M%S).log

}

#-------------------------------------------------------------------------------

ask() {

  read -p "Execute command? y/[n]: " input
  input=${input:-n}
  # echo $input
  echo -e "\n"

  if [ "$input" = "y" ]; then
    $command $options
  fi

  echo -e "\n"
}

arg.set() {

  # This function adds a leading space to a given argument.
  # The purpose is to avoid trailing spaces in the final output if no
  # arguments are given.

  if [ -n "$2" ]
    then
      declare -g $1=" $2"
      #echo $param1
  fi
}

main() {
  init $*
  ask
}

#-------------------------------------------------------------------------------

case "$1" in

"" | "--help" | "-h") help.show ;;

*) main $*;;

esac
